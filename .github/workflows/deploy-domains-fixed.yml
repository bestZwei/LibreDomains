name: 部署域名配置

on:
  push:
    branches:
      - main
    paths:
      - 'domains/**/*.json'
      
  workflow_dispatch:
    inputs:
      force_all:
        description: '强制更新所有域名配置'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    # 添加仓库检查，确保只在主仓库运行
    if: github.repository == 'bestzwei/LibreDomains' 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
        
      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: 安装依赖
        run: pip install requests dnspython
        
      - name: 获取更改的文件
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.force_all == 'false' }}
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: 'domains/**/*.json'
          separator: ' '
          since_last_remote_commit: true
      
      - name: 获取所有域名文件
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force_all == 'true' }}
        id: all-files
        run: |
          find domains -name "*.json" -not -name "example.json" > all_files.txt
          DOMAIN_FILES=$(cat all_files.txt | tr '\n' ' ')
          echo "files=$DOMAIN_FILES" >> $GITHUB_OUTPUT
          
      - name: 设置部署文件
        id: deploy-files
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.force_all }}" == "true" ]; then
            FILES="${{ steps.all-files.outputs.files }}"
          else
            FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          fi
          echo "files=$FILES" >> $GITHUB_OUTPUT
      
      - name: 部署域名配置
        if: steps.deploy-files.outputs.files != ''
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
        run: |
          # 设置 Python 路径以便正确导入模块
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # 检查必需的环境变量
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "❌ 错误: CLOUDFLARE_API_TOKEN 环境变量未设置"
            echo "请在 GitHub 仓库的 Settings > Secrets and variables > Actions 中添加 CLOUDFLARE_API_TOKEN"
            exit 1
          fi
          
          echo "✅ Cloudflare API Token 已配置 (长度: ${#CLOUDFLARE_API_TOKEN})"
          
          # 处理每个文件
          for file in ${{ steps.deploy-files.outputs.files }}; do
            echo "处理文件: $file"
            
            # 提取域名和子域名
            DOMAIN=$(echo $file | cut -d'/' -f2)
            SUBDOMAIN=$(basename $file .json)
            
            # 跳过示例文件
            if [ "$SUBDOMAIN" == "example" ]; then
              echo "跳过示例文件"
              continue
            fi
            
            echo "域名: $DOMAIN, 子域名: $SUBDOMAIN"
            
            # 首先运行调试模式验证权限
            echo "=== 验证 API Token 权限 ==="
            if ! python scripts/cloudflare/cloudflare_manager.py \
              --api-key "$CLOUDFLARE_API_TOKEN" \
              $( [ -n "$CLOUDFLARE_EMAIL" ] && echo "--email $CLOUDFLARE_EMAIL" ) \
              --domain "$DOMAIN" \
              --subdomain "$SUBDOMAIN" \
              --action debug \
              --debug; then
              echo "❌ API Token 权限验证失败"
              echo "请检查:"
              echo "1. API Token 是否有效"
              echo "2. API Token 是否有 Zone:Read 和 DNS:Edit 权限"
              echo "3. API Token 是否能访问域名 $DOMAIN 的 Zone"
              exit 1
            fi
            
            echo "=== 开始同步 DNS 记录 ==="
            # 然后运行实际同步
            if ! python scripts/cloudflare/cloudflare_manager.py \
              --api-key "$CLOUDFLARE_API_TOKEN" \
              $( [ -n "$CLOUDFLARE_EMAIL" ] && echo "--email $CLOUDFLARE_EMAIL" ) \
              --domain "$DOMAIN" \
              --subdomain "$SUBDOMAIN" \
              --json-file "$file" \
              --action sync \
              --debug; then
              echo "❌ DNS 记录同步失败: $file"
              echo "请查看上方的详细错误信息"
              exit 1
            else
              echo "✅ DNS 记录同步成功: $file"
            fi
            
            echo "---"
          done
          
          echo "🎉 所有域名配置部署完成!"
